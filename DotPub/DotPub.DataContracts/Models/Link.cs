/*
 * GoToSocial Swagger documentation.
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: REPLACE_ME
 * Contact: admin@gotosocial.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace DotPub.DataContracts.Models
{
	/// <summary>
	/// See https://webfinger.net/
	/// </summary>
	[DataContract]
	public partial class Link : IEquatable<Link>
	{
		/// <summary>
		/// Gets or Sets Href
		/// </summary>

		[DataMember(Name = "href")]
		public string Href { get; set; }

		/// <summary>
		/// Gets or Sets Rel
		/// </summary>

		[DataMember(Name = "rel")]
		public string Rel { get; set; }

		/// <summary>
		/// Gets or Sets Template
		/// </summary>

		[DataMember(Name = "template")]
		public string Template { get; set; }

		/// <summary>
		/// Gets or Sets Type
		/// </summary>

		[DataMember(Name = "type")]
		public string Type { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class Link {\n");
			sb.Append("  Href: ").Append(Href).Append("\n");
			sb.Append("  Rel: ").Append(Rel).Append("\n");
			sb.Append("  Template: ").Append(Template).Append("\n");
			sb.Append("  Type: ").Append(Type).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonSerializer.Serialize(this, new JsonSerializerOptions() { WriteIndented = true });
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((Link)obj);
		}

		/// <summary>
		/// Returns true if Link instances are equal
		/// </summary>
		/// <param name="other">Instance of Link to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Link other)
		{
			if (ReferenceEquals(null, other)) return false;
			if (ReferenceEquals(this, other)) return true;

			return
				(
					Href == other.Href ||
					Href != null &&
					Href.Equals(other.Href)
				) &&
				(
					Rel == other.Rel ||
					Rel != null &&
					Rel.Equals(other.Rel)
				) &&
				(
					Template == other.Template ||
					Template != null &&
					Template.Equals(other.Template)
				) &&
				(
					Type == other.Type ||
					Type != null &&
					Type.Equals(other.Type)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				var hashCode = 41;
				// Suitable nullity checks etc, of course :)
				if (Href != null)
					hashCode = hashCode * 59 + Href.GetHashCode();
				if (Rel != null)
					hashCode = hashCode * 59 + Rel.GetHashCode();
				if (Template != null)
					hashCode = hashCode * 59 + Template.GetHashCode();
				if (Type != null)
					hashCode = hashCode * 59 + Type.GetHashCode();
				return hashCode;
			}
		}

		#region Operators

#pragma warning disable 1591

		public static bool operator ==(Link left, Link right)
		{
			return Equals(left, right);
		}

		public static bool operator !=(Link left, Link right)
		{
			return !Equals(left, right);
		}

#pragma warning restore 1591

		#endregion Operators
	}
}