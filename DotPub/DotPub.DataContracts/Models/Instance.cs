/*
 * GoToSocial Swagger documentation.
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: REPLACE_ME
 * Contact: admin@gotosocial.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace DotPub.DataContracts.Models
{
	/// <summary>
	/// 
	/// </summary>
	[DataContract]
	public partial class Instance : IEquatable<Instance>
	{
		/// <summary>
		/// The domain of accounts on this instance. This will not necessarily be the same as simply the Host part of the URI.
		/// </summary>
		/// <value>The domain of accounts on this instance. This will not necessarily be the same as simply the Host part of the URI.</value>

		[DataMember(Name = "account_domain")]
		public string AccountDomain { get; set; }

		/// <summary>
		/// New account registrations require admin approval.
		/// </summary>
		/// <value>New account registrations require admin approval.</value>

		[DataMember(Name = "approval_required")]
		public bool? ApprovalRequired { get; set; }

		/// <summary>
		/// Gets or Sets Configuration
		/// </summary>

		[DataMember(Name = "configuration")]
		public InstanceConfiguration Configuration { get; set; }

		/// <summary>
		/// Gets or Sets ContactAccount
		/// </summary>

		[DataMember(Name = "contact_account")]
		public Account ContactAccount { get; set; }

		/// <summary>
		/// Description of the instance.  Should be HTML formatted, but might be plaintext.  This should be displayed on the &#39;about&#39; page for an instance.
		/// </summary>
		/// <value>Description of the instance.  Should be HTML formatted, but might be plaintext.  This should be displayed on the &#39;about&#39; page for an instance.</value>

		[DataMember(Name = "description")]
		public string Description { get; set; }

		/// <summary>
		/// An email address that may be used for inquiries.
		/// </summary>
		/// <value>An email address that may be used for inquiries.</value>

		[DataMember(Name = "email")]
		public string Email { get; set; }

		/// <summary>
		/// Invites are enabled on this instance.
		/// </summary>
		/// <value>Invites are enabled on this instance.</value>

		[DataMember(Name = "invites_enabled")]
		public bool? InvitesEnabled { get; set; }

		/// <summary>
		/// Primary language of the instance.
		/// </summary>
		/// <value>Primary language of the instance.</value>

		[DataMember(Name = "languages")]
		public List<string> Languages { get; set; }

		/// <summary>
		/// Maximum allowed length of a post on this instance, in characters.  This is provided for compatibility with Tusky and other apps.
		/// </summary>
		/// <value>Maximum allowed length of a post on this instance, in characters.  This is provided for compatibility with Tusky and other apps.</value>

		[DataMember(Name = "max_toot_chars")]
		public int? MaxTootChars { get; set; }

		/// <summary>
		/// New account registrations are enabled on this instance.
		/// </summary>
		/// <value>New account registrations are enabled on this instance.</value>

		[DataMember(Name = "registrations")]
		public bool? Registrations { get; set; }

		/// <summary>
		/// A shorter description of the instance.  Should be HTML formatted, but might be plaintext.  This should be displayed on the instance splash/landing page.
		/// </summary>
		/// <value>A shorter description of the instance.  Should be HTML formatted, but might be plaintext.  This should be displayed on the instance splash/landing page.</value>

		[DataMember(Name = "short_description")]
		public string ShortDescription { get; set; }

		/// <summary>
		/// Statistics about the instance: number of posts, accounts, etc.
		/// </summary>
		/// <value>Statistics about the instance: number of posts, accounts, etc.</value>

		[DataMember(Name = "stats")]
		public Dictionary<string, long?> Stats { get; set; }

		/// <summary>
		/// URL of the instance avatar/banner image.
		/// </summary>
		/// <value>URL of the instance avatar/banner image.</value>

		[DataMember(Name = "thumbnail")]
		public string Thumbnail { get; set; }

		/// <summary>
		/// Description of the instance thumbnail.
		/// </summary>
		/// <value>Description of the instance thumbnail.</value>

		[DataMember(Name = "thumbnail_description")]
		public string ThumbnailDescription { get; set; }

		/// <summary>
		/// MIME type of the instance thumbnail.
		/// </summary>
		/// <value>MIME type of the instance thumbnail.</value>

		[DataMember(Name = "thumbnail_type")]
		public string ThumbnailType { get; set; }

		/// <summary>
		/// The title of the instance.
		/// </summary>
		/// <value>The title of the instance.</value>

		[DataMember(Name = "title")]
		public string Title { get; set; }

		/// <summary>
		/// The URI of the instance.
		/// </summary>
		/// <value>The URI of the instance.</value>

		[DataMember(Name = "uri")]
		public string Uri { get; set; }

		/// <summary>
		/// Gets or Sets Urls
		/// </summary>

		[DataMember(Name = "urls")]
		public InstanceURLs Urls { get; set; }

		/// <summary>
		/// The version of GoToSocial installed on the instance.  This will contain at least a semantic version number.  It may also contain, after a space, the short git commit ID of the running software.
		/// </summary>
		/// <value>The version of GoToSocial installed on the instance.  This will contain at least a semantic version number.  It may also contain, after a space, the short git commit ID of the running software.</value>

		[DataMember(Name = "version")]
		public string Version { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class Instance {\n");
			sb.Append("  AccountDomain: ").Append(AccountDomain).Append("\n");
			sb.Append("  ApprovalRequired: ").Append(ApprovalRequired).Append("\n");
			sb.Append("  Configuration: ").Append(Configuration).Append("\n");
			sb.Append("  ContactAccount: ").Append(ContactAccount).Append("\n");
			sb.Append("  Description: ").Append(Description).Append("\n");
			sb.Append("  Email: ").Append(Email).Append("\n");
			sb.Append("  InvitesEnabled: ").Append(InvitesEnabled).Append("\n");
			sb.Append("  Languages: ").Append(Languages).Append("\n");
			sb.Append("  MaxTootChars: ").Append(MaxTootChars).Append("\n");
			sb.Append("  Registrations: ").Append(Registrations).Append("\n");
			sb.Append("  ShortDescription: ").Append(ShortDescription).Append("\n");
			sb.Append("  Stats: ").Append(Stats).Append("\n");
			sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
			sb.Append("  ThumbnailDescription: ").Append(ThumbnailDescription).Append("\n");
			sb.Append("  ThumbnailType: ").Append(ThumbnailType).Append("\n");
			sb.Append("  Title: ").Append(Title).Append("\n");
			sb.Append("  Uri: ").Append(Uri).Append("\n");
			sb.Append("  Urls: ").Append(Urls).Append("\n");
			sb.Append("  Version: ").Append(Version).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonSerializer.Serialize(this, new JsonSerializerOptions() { WriteIndented = true });
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((Instance)obj);
		}

		/// <summary>
		/// Returns true if Instance instances are equal
		/// </summary>
		/// <param name="other">Instance of Instance to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Instance other)
		{
			if (ReferenceEquals(null, other)) return false;
			if (ReferenceEquals(this, other)) return true;

			return
				(
					AccountDomain == other.AccountDomain ||
					AccountDomain != null &&
					AccountDomain.Equals(other.AccountDomain)
				) &&
				(
					ApprovalRequired == other.ApprovalRequired ||
					ApprovalRequired != null &&
					ApprovalRequired.Equals(other.ApprovalRequired)
				) &&
				(
					Configuration == other.Configuration ||
					Configuration != null &&
					Configuration.Equals(other.Configuration)
				) &&
				(
					ContactAccount == other.ContactAccount ||
					ContactAccount != null &&
					ContactAccount.Equals(other.ContactAccount)
				) &&
				(
					Description == other.Description ||
					Description != null &&
					Description.Equals(other.Description)
				) &&
				(
					Email == other.Email ||
					Email != null &&
					Email.Equals(other.Email)
				) &&
				(
					InvitesEnabled == other.InvitesEnabled ||
					InvitesEnabled != null &&
					InvitesEnabled.Equals(other.InvitesEnabled)
				) &&
				(
					Languages == other.Languages ||
					Languages != null &&
					Languages.SequenceEqual(other.Languages)
				) &&
				(
					MaxTootChars == other.MaxTootChars ||
					MaxTootChars != null &&
					MaxTootChars.Equals(other.MaxTootChars)
				) &&
				(
					Registrations == other.Registrations ||
					Registrations != null &&
					Registrations.Equals(other.Registrations)
				) &&
				(
					ShortDescription == other.ShortDescription ||
					ShortDescription != null &&
					ShortDescription.Equals(other.ShortDescription)
				) &&
				(
					Stats == other.Stats ||
					Stats != null &&
					Stats.SequenceEqual(other.Stats)
				) &&
				(
					Thumbnail == other.Thumbnail ||
					Thumbnail != null &&
					Thumbnail.Equals(other.Thumbnail)
				) &&
				(
					ThumbnailDescription == other.ThumbnailDescription ||
					ThumbnailDescription != null &&
					ThumbnailDescription.Equals(other.ThumbnailDescription)
				) &&
				(
					ThumbnailType == other.ThumbnailType ||
					ThumbnailType != null &&
					ThumbnailType.Equals(other.ThumbnailType)
				) &&
				(
					Title == other.Title ||
					Title != null &&
					Title.Equals(other.Title)
				) &&
				(
					Uri == other.Uri ||
					Uri != null &&
					Uri.Equals(other.Uri)
				) &&
				(
					Urls == other.Urls ||
					Urls != null &&
					Urls.Equals(other.Urls)
				) &&
				(
					Version == other.Version ||
					Version != null &&
					Version.Equals(other.Version)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				var hashCode = 41;
				// Suitable nullity checks etc, of course :)
				if (AccountDomain != null)
					hashCode = hashCode * 59 + AccountDomain.GetHashCode();
				if (ApprovalRequired != null)
					hashCode = hashCode * 59 + ApprovalRequired.GetHashCode();
				if (Configuration != null)
					hashCode = hashCode * 59 + Configuration.GetHashCode();
				if (ContactAccount != null)
					hashCode = hashCode * 59 + ContactAccount.GetHashCode();
				if (Description != null)
					hashCode = hashCode * 59 + Description.GetHashCode();
				if (Email != null)
					hashCode = hashCode * 59 + Email.GetHashCode();
				if (InvitesEnabled != null)
					hashCode = hashCode * 59 + InvitesEnabled.GetHashCode();
				if (Languages != null)
					hashCode = hashCode * 59 + Languages.GetHashCode();
				if (MaxTootChars != null)
					hashCode = hashCode * 59 + MaxTootChars.GetHashCode();
				if (Registrations != null)
					hashCode = hashCode * 59 + Registrations.GetHashCode();
				if (ShortDescription != null)
					hashCode = hashCode * 59 + ShortDescription.GetHashCode();
				if (Stats != null)
					hashCode = hashCode * 59 + Stats.GetHashCode();
				if (Thumbnail != null)
					hashCode = hashCode * 59 + Thumbnail.GetHashCode();
				if (ThumbnailDescription != null)
					hashCode = hashCode * 59 + ThumbnailDescription.GetHashCode();
				if (ThumbnailType != null)
					hashCode = hashCode * 59 + ThumbnailType.GetHashCode();
				if (Title != null)
					hashCode = hashCode * 59 + Title.GetHashCode();
				if (Uri != null)
					hashCode = hashCode * 59 + Uri.GetHashCode();
				if (Urls != null)
					hashCode = hashCode * 59 + Urls.GetHashCode();
				if (Version != null)
					hashCode = hashCode * 59 + Version.GetHashCode();
				return hashCode;
			}
		}

		#region Operators

#pragma warning disable 1591

		public static bool operator ==(Instance left, Instance right)
		{
			return Equals(left, right);
		}

		public static bool operator !=(Instance left, Instance right)
		{
			return !Equals(left, right);
		}

#pragma warning restore 1591

		#endregion Operators
	}
}