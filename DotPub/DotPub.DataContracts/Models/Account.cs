/*
 * GoToSocial Swagger documentation.
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: REPLACE_ME
 * Contact: admin@gotosocial.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace DotPub.DataContracts.Models
{
	/// <summary>
	/// The modelled account can be either a remote account, or one on this instance.
	/// </summary>
	[DataContract]
	public partial class Account : IEquatable<Account>
	{
		/// <summary>
		/// The account URI as discovered via webfinger. Equal to username for local users, or username@domain for remote users.
		/// </summary>
		/// <value>The account URI as discovered via webfinger. Equal to username for local users, or username@domain for remote users.</value>

		[DataMember(Name = "acct")]
		public string Acct { get; set; }

		/// <summary>
		/// Web location of the account&#39;s avatar.
		/// </summary>
		/// <value>Web location of the account&#39;s avatar.</value>

		[DataMember(Name = "avatar")]
		public string Avatar { get; set; }

		/// <summary>
		/// Web location of a static version of the account&#39;s avatar. Only relevant when the account&#39;s main avatar is a video or a gif.
		/// </summary>
		/// <value>Web location of a static version of the account&#39;s avatar. Only relevant when the account&#39;s main avatar is a video or a gif.</value>

		[DataMember(Name = "avatar_static")]
		public string AvatarStatic { get; set; }

		/// <summary>
		/// Account identifies as a bot.
		/// </summary>
		/// <value>Account identifies as a bot.</value>

		[DataMember(Name = "bot")]
		public bool? Bot { get; set; }

		/// <summary>
		/// When the account was created (ISO 8601 Datetime).
		/// </summary>
		/// <value>When the account was created (ISO 8601 Datetime).</value>

		[DataMember(Name = "created_at")]
		public string CreatedAt { get; set; }

		/// <summary>
		/// CustomCSS to include when rendering this account&#39;s profile or statuses.
		/// </summary>
		/// <value>CustomCSS to include when rendering this account&#39;s profile or statuses.</value>

		[DataMember(Name = "custom_css")]
		public string CustomCss { get; set; }

		/// <summary>
		/// Account has opted into discovery features.
		/// </summary>
		/// <value>Account has opted into discovery features.</value>

		[DataMember(Name = "discoverable")]
		public bool? Discoverable { get; set; }

		/// <summary>
		/// The account&#39;s display name.
		/// </summary>
		/// <value>The account&#39;s display name.</value>

		[DataMember(Name = "display_name")]
		public string DisplayName { get; set; }

		/// <summary>
		/// Array of custom emojis used in this account&#39;s note or display name.
		/// </summary>
		/// <value>Array of custom emojis used in this account&#39;s note or display name.</value>

		[DataMember(Name = "emojis")]
		public List<Emoji> Emojis { get; set; }

		/// <summary>
		/// Account has enabled RSS feed.
		/// </summary>
		/// <value>Account has enabled RSS feed.</value>

		[DataMember(Name = "enable_rss")]
		public bool? EnableRss { get; set; }

		/// <summary>
		/// Additional metadata attached to this account&#39;s profile.
		/// </summary>
		/// <value>Additional metadata attached to this account&#39;s profile.</value>

		[DataMember(Name = "fields")]
		public List<Field> Fields { get; set; }

		/// <summary>
		/// Number of accounts following this account, according to our instance.
		/// </summary>
		/// <value>Number of accounts following this account, according to our instance.</value>

		[DataMember(Name = "followers_count")]
		public long? FollowersCount { get; set; }

		/// <summary>
		/// Number of account&#39;s followed by this account, according to our instance.
		/// </summary>
		/// <value>Number of account&#39;s followed by this account, according to our instance.</value>

		[DataMember(Name = "following_count")]
		public long? FollowingCount { get; set; }

		/// <summary>
		/// Web location of the account&#39;s header image.
		/// </summary>
		/// <value>Web location of the account&#39;s header image.</value>

		[DataMember(Name = "header")]
		public string Header { get; set; }

		/// <summary>
		/// Web location of a static version of the account&#39;s header. Only relevant when the account&#39;s main header is a video or a gif.
		/// </summary>
		/// <value>Web location of a static version of the account&#39;s header. Only relevant when the account&#39;s main header is a video or a gif.</value>

		[DataMember(Name = "header_static")]
		public string HeaderStatic { get; set; }

		/// <summary>
		/// The account id.
		/// </summary>
		/// <value>The account id.</value>

		[DataMember(Name = "id")]
		public string Id { get; set; }

		/// <summary>
		/// When the account&#39;s most recent status was posted (ISO 8601 Datetime).
		/// </summary>
		/// <value>When the account&#39;s most recent status was posted (ISO 8601 Datetime).</value>

		[DataMember(Name = "last_status_at")]
		public string LastStatusAt { get; set; }

		/// <summary>
		/// Account manually approves follow requests.
		/// </summary>
		/// <value>Account manually approves follow requests.</value>

		[DataMember(Name = "locked")]
		public bool? Locked { get; set; }

		/// <summary>
		/// If this account has been muted, when will the mute expire (ISO 8601 Datetime).
		/// </summary>
		/// <value>If this account has been muted, when will the mute expire (ISO 8601 Datetime).</value>

		[DataMember(Name = "mute_expires_at")]
		public string MuteExpiresAt { get; set; }

		/// <summary>
		/// Bio/description of this account.
		/// </summary>
		/// <value>Bio/description of this account.</value>

		[DataMember(Name = "note")]
		public string Note { get; set; }

		/// <summary>
		/// Role of the account on this instance. Omitted for remote accounts.
		/// </summary>
		/// <value>Role of the account on this instance. Omitted for remote accounts.</value>

		[DataMember(Name = "role")]
		public string Role { get; set; }

		/// <summary>
		/// Gets or Sets Source
		/// </summary>

		[DataMember(Name = "source")]
		public Source Source { get; set; }

		/// <summary>
		/// Number of statuses posted by this account, according to our instance.
		/// </summary>
		/// <value>Number of statuses posted by this account, according to our instance.</value>

		[DataMember(Name = "statuses_count")]
		public long? StatusesCount { get; set; }

		/// <summary>
		/// Account has been suspended by our instance.
		/// </summary>
		/// <value>Account has been suspended by our instance.</value>

		[DataMember(Name = "suspended")]
		public bool? Suspended { get; set; }

		/// <summary>
		/// Web location of the account&#39;s profile page.
		/// </summary>
		/// <value>Web location of the account&#39;s profile page.</value>

		[DataMember(Name = "url")]
		public string Url { get; set; }

		/// <summary>
		/// The username of the account, not including domain.
		/// </summary>
		/// <value>The username of the account, not including domain.</value>

		[DataMember(Name = "username")]
		public string Username { get; set; }

		/// <summary>
		/// Returns the string presentation of the object
		/// </summary>
		/// <returns>String presentation of the object</returns>
		public override string ToString()
		{
			var sb = new StringBuilder();
			sb.Append("class Account {\n");
			sb.Append("  Acct: ").Append(Acct).Append("\n");
			sb.Append("  Avatar: ").Append(Avatar).Append("\n");
			sb.Append("  AvatarStatic: ").Append(AvatarStatic).Append("\n");
			sb.Append("  Bot: ").Append(Bot).Append("\n");
			sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
			sb.Append("  CustomCss: ").Append(CustomCss).Append("\n");
			sb.Append("  Discoverable: ").Append(Discoverable).Append("\n");
			sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
			sb.Append("  Emojis: ").Append(Emojis).Append("\n");
			sb.Append("  EnableRss: ").Append(EnableRss).Append("\n");
			sb.Append("  Fields: ").Append(Fields).Append("\n");
			sb.Append("  FollowersCount: ").Append(FollowersCount).Append("\n");
			sb.Append("  FollowingCount: ").Append(FollowingCount).Append("\n");
			sb.Append("  Header: ").Append(Header).Append("\n");
			sb.Append("  HeaderStatic: ").Append(HeaderStatic).Append("\n");
			sb.Append("  Id: ").Append(Id).Append("\n");
			sb.Append("  LastStatusAt: ").Append(LastStatusAt).Append("\n");
			sb.Append("  Locked: ").Append(Locked).Append("\n");
			sb.Append("  MuteExpiresAt: ").Append(MuteExpiresAt).Append("\n");
			sb.Append("  Note: ").Append(Note).Append("\n");
			sb.Append("  Role: ").Append(Role).Append("\n");
			sb.Append("  Source: ").Append(Source).Append("\n");
			sb.Append("  StatusesCount: ").Append(StatusesCount).Append("\n");
			sb.Append("  Suspended: ").Append(Suspended).Append("\n");
			sb.Append("  Url: ").Append(Url).Append("\n");
			sb.Append("  Username: ").Append(Username).Append("\n");
			sb.Append("}\n");
			return sb.ToString();
		}

		/// <summary>
		/// Returns the JSON string presentation of the object
		/// </summary>
		/// <returns>JSON string presentation of the object</returns>
		public string ToJson()
		{
			return JsonSerializer.Serialize(this, new JsonSerializerOptions() { WriteIndented = true });
		}

		/// <summary>
		/// Returns true if objects are equal
		/// </summary>
		/// <param name="obj">Object to be compared</param>
		/// <returns>Boolean</returns>
		public override bool Equals(object obj)
		{
			if (ReferenceEquals(null, obj)) return false;
			if (ReferenceEquals(this, obj)) return true;
			return obj.GetType() == GetType() && Equals((Account)obj);
		}

		/// <summary>
		/// Returns true if Account instances are equal
		/// </summary>
		/// <param name="other">Instance of Account to be compared</param>
		/// <returns>Boolean</returns>
		public bool Equals(Account other)
		{
			if (ReferenceEquals(null, other)) return false;
			if (ReferenceEquals(this, other)) return true;

			return
				(
					Acct == other.Acct ||
					Acct != null &&
					Acct.Equals(other.Acct)
				) &&
				(
					Avatar == other.Avatar ||
					Avatar != null &&
					Avatar.Equals(other.Avatar)
				) &&
				(
					AvatarStatic == other.AvatarStatic ||
					AvatarStatic != null &&
					AvatarStatic.Equals(other.AvatarStatic)
				) &&
				(
					Bot == other.Bot ||
					Bot != null &&
					Bot.Equals(other.Bot)
				) &&
				(
					CreatedAt == other.CreatedAt ||
					CreatedAt != null &&
					CreatedAt.Equals(other.CreatedAt)
				) &&
				(
					CustomCss == other.CustomCss ||
					CustomCss != null &&
					CustomCss.Equals(other.CustomCss)
				) &&
				(
					Discoverable == other.Discoverable ||
					Discoverable != null &&
					Discoverable.Equals(other.Discoverable)
				) &&
				(
					DisplayName == other.DisplayName ||
					DisplayName != null &&
					DisplayName.Equals(other.DisplayName)
				) &&
				(
					Emojis == other.Emojis ||
					Emojis != null &&
					Emojis.SequenceEqual(other.Emojis)
				) &&
				(
					EnableRss == other.EnableRss ||
					EnableRss != null &&
					EnableRss.Equals(other.EnableRss)
				) &&
				(
					Fields == other.Fields ||
					Fields != null &&
					Fields.SequenceEqual(other.Fields)
				) &&
				(
					FollowersCount == other.FollowersCount ||
					FollowersCount != null &&
					FollowersCount.Equals(other.FollowersCount)
				) &&
				(
					FollowingCount == other.FollowingCount ||
					FollowingCount != null &&
					FollowingCount.Equals(other.FollowingCount)
				) &&
				(
					Header == other.Header ||
					Header != null &&
					Header.Equals(other.Header)
				) &&
				(
					HeaderStatic == other.HeaderStatic ||
					HeaderStatic != null &&
					HeaderStatic.Equals(other.HeaderStatic)
				) &&
				(
					Id == other.Id ||
					Id != null &&
					Id.Equals(other.Id)
				) &&
				(
					LastStatusAt == other.LastStatusAt ||
					LastStatusAt != null &&
					LastStatusAt.Equals(other.LastStatusAt)
				) &&
				(
					Locked == other.Locked ||
					Locked != null &&
					Locked.Equals(other.Locked)
				) &&
				(
					MuteExpiresAt == other.MuteExpiresAt ||
					MuteExpiresAt != null &&
					MuteExpiresAt.Equals(other.MuteExpiresAt)
				) &&
				(
					Note == other.Note ||
					Note != null &&
					Note.Equals(other.Note)
				) &&
				(
					Role == other.Role ||
					Role != null &&
					Role.Equals(other.Role)
				) &&
				(
					Source == other.Source ||
					Source != null &&
					Source.Equals(other.Source)
				) &&
				(
					StatusesCount == other.StatusesCount ||
					StatusesCount != null &&
					StatusesCount.Equals(other.StatusesCount)
				) &&
				(
					Suspended == other.Suspended ||
					Suspended != null &&
					Suspended.Equals(other.Suspended)
				) &&
				(
					Url == other.Url ||
					Url != null &&
					Url.Equals(other.Url)
				) &&
				(
					Username == other.Username ||
					Username != null &&
					Username.Equals(other.Username)
				);
		}

		/// <summary>
		/// Gets the hash code
		/// </summary>
		/// <returns>Hash code</returns>
		public override int GetHashCode()
		{
			unchecked // Overflow is fine, just wrap
			{
				var hashCode = 41;
				// Suitable nullity checks etc, of course :)
				if (Acct != null)
					hashCode = hashCode * 59 + Acct.GetHashCode();
				if (Avatar != null)
					hashCode = hashCode * 59 + Avatar.GetHashCode();
				if (AvatarStatic != null)
					hashCode = hashCode * 59 + AvatarStatic.GetHashCode();
				if (Bot != null)
					hashCode = hashCode * 59 + Bot.GetHashCode();
				if (CreatedAt != null)
					hashCode = hashCode * 59 + CreatedAt.GetHashCode();
				if (CustomCss != null)
					hashCode = hashCode * 59 + CustomCss.GetHashCode();
				if (Discoverable != null)
					hashCode = hashCode * 59 + Discoverable.GetHashCode();
				if (DisplayName != null)
					hashCode = hashCode * 59 + DisplayName.GetHashCode();
				if (Emojis != null)
					hashCode = hashCode * 59 + Emojis.GetHashCode();
				if (EnableRss != null)
					hashCode = hashCode * 59 + EnableRss.GetHashCode();
				if (Fields != null)
					hashCode = hashCode * 59 + Fields.GetHashCode();
				if (FollowersCount != null)
					hashCode = hashCode * 59 + FollowersCount.GetHashCode();
				if (FollowingCount != null)
					hashCode = hashCode * 59 + FollowingCount.GetHashCode();
				if (Header != null)
					hashCode = hashCode * 59 + Header.GetHashCode();
				if (HeaderStatic != null)
					hashCode = hashCode * 59 + HeaderStatic.GetHashCode();
				if (Id != null)
					hashCode = hashCode * 59 + Id.GetHashCode();
				if (LastStatusAt != null)
					hashCode = hashCode * 59 + LastStatusAt.GetHashCode();
				if (Locked != null)
					hashCode = hashCode * 59 + Locked.GetHashCode();
				if (MuteExpiresAt != null)
					hashCode = hashCode * 59 + MuteExpiresAt.GetHashCode();
				if (Note != null)
					hashCode = hashCode * 59 + Note.GetHashCode();
				if (Role != null)
					hashCode = hashCode * 59 + Role.GetHashCode();
				if (Source != null)
					hashCode = hashCode * 59 + Source.GetHashCode();
				if (StatusesCount != null)
					hashCode = hashCode * 59 + StatusesCount.GetHashCode();
				if (Suspended != null)
					hashCode = hashCode * 59 + Suspended.GetHashCode();
				if (Url != null)
					hashCode = hashCode * 59 + Url.GetHashCode();
				if (Username != null)
					hashCode = hashCode * 59 + Username.GetHashCode();
				return hashCode;
			}
		}

		#region Operators

#pragma warning disable 1591

		public static bool operator ==(Account left, Account right)
		{
			return Equals(left, right);
		}

		public static bool operator !=(Account left, Account right)
		{
			return !Equals(left, right);
		}

#pragma warning restore 1591

		#endregion Operators
	}
}