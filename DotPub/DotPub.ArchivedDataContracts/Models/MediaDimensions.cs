/*
 * GoToSocial Swagger documentation.
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: REPLACE_ME
 * Contact: admin@gotosocial.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace DotPub.DataContracts.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MediaDimensions : IEquatable<MediaDimensions>
    {
        /// <summary>
        /// Aspect ratio of the media. Equal to width / height.
        /// </summary>
        /// <value>Aspect ratio of the media. Equal to width / height.</value>

        [DataMember(Name = "aspect")]
        public float? Aspect { get; set; }

        /// <summary>
        /// Bitrate of the media in bits per second.
        /// </summary>
        /// <value>Bitrate of the media in bits per second.</value>

        [DataMember(Name = "bitrate")]
        public long? Bitrate { get; set; }

        /// <summary>
        /// Duration of the media in seconds. Only set for video and audio.
        /// </summary>
        /// <value>Duration of the media in seconds. Only set for video and audio.</value>

        [DataMember(Name = "duration")]
        public float? Duration { get; set; }

        /// <summary>
        /// Framerate of the media. Only set for video and gifs.
        /// </summary>
        /// <value>Framerate of the media. Only set for video and gifs.</value>

        [DataMember(Name = "frame_rate")]
        public string FrameRate { get; set; }

        /// <summary>
        /// Height of the media in pixels. Not set for audio.
        /// </summary>
        /// <value>Height of the media in pixels. Not set for audio.</value>

        [DataMember(Name = "height")]
        public long? Height { get; set; }

        /// <summary>
        /// Size of the media, in the format &#x60;[width]x[height]&#x60;. Not set for audio.
        /// </summary>
        /// <value>Size of the media, in the format &#x60;[width]x[height]&#x60;. Not set for audio.</value>

        [DataMember(Name = "size")]
        public string Size { get; set; }

        /// <summary>
        /// Width of the media in pixels. Not set for audio.
        /// </summary>
        /// <value>Width of the media in pixels. Not set for audio.</value>

        [DataMember(Name = "width")]
        public long? Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaDimensions {\n");
            sb.Append("  Aspect: ").Append(Aspect).Append("\n");
            sb.Append("  Bitrate: ").Append(Bitrate).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  FrameRate: ").Append(FrameRate).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions() { WriteIndented = true });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MediaDimensions)obj);
        }

        /// <summary>
        /// Returns true if MediaDimensions instances are equal
        /// </summary>
        /// <param name="other">Instance of MediaDimensions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaDimensions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Aspect == other.Aspect ||
                    Aspect != null &&
                    Aspect.Equals(other.Aspect)
                ) &&
                (
                    Bitrate == other.Bitrate ||
                    Bitrate != null &&
                    Bitrate.Equals(other.Bitrate)
                ) &&
                (
                    Duration == other.Duration ||
                    Duration != null &&
                    Duration.Equals(other.Duration)
                ) &&
                (
                    FrameRate == other.FrameRate ||
                    FrameRate != null &&
                    FrameRate.Equals(other.FrameRate)
                ) &&
                (
                    Height == other.Height ||
                    Height != null &&
                    Height.Equals(other.Height)
                ) &&
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) &&
                (
                    Width == other.Width ||
                    Width != null &&
                    Width.Equals(other.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Aspect != null)
                    hashCode = hashCode * 59 + Aspect.GetHashCode();
                if (Bitrate != null)
                    hashCode = hashCode * 59 + Bitrate.GetHashCode();
                if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                if (FrameRate != null)
                    hashCode = hashCode * 59 + FrameRate.GetHashCode();
                if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                if (Width != null)
                    hashCode = hashCode * 59 + Width.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(MediaDimensions left, MediaDimensions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MediaDimensions left, MediaDimensions right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}