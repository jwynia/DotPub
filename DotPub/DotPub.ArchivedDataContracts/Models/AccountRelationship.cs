/*
 * GoToSocial Swagger documentation.
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: REPLACE_ME
 * Contact: admin@gotosocial.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace DotPub.DataContracts.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AccountRelationship : IEquatable<AccountRelationship>
    { 
        /// <summary>
        /// This account is blocking you.
        /// </summary>
        /// <value>This account is blocking you.</value>

        [DataMember(Name="blocked_by")]
        public bool? BlockedBy { get; set; }

        /// <summary>
        /// You are blocking this account.
        /// </summary>
        /// <value>You are blocking this account.</value>

        [DataMember(Name="blocking")]
        public bool? Blocking { get; set; }

        /// <summary>
        /// You are blocking this account&#39;s domain.
        /// </summary>
        /// <value>You are blocking this account&#39;s domain.</value>

        [DataMember(Name="domain_blocking")]
        public bool? DomainBlocking { get; set; }

        /// <summary>
        /// You are featuring this account on your profile.
        /// </summary>
        /// <value>You are featuring this account on your profile.</value>

        [DataMember(Name="endorsed")]
        public bool? Endorsed { get; set; }

        /// <summary>
        /// This account follows you.
        /// </summary>
        /// <value>This account follows you.</value>

        [DataMember(Name="followed_by")]
        public bool? FollowedBy { get; set; }

        /// <summary>
        /// You are following this account.
        /// </summary>
        /// <value>You are following this account.</value>

        [DataMember(Name="following")]
        public bool? Following { get; set; }

        /// <summary>
        /// The account id.
        /// </summary>
        /// <value>The account id.</value>

        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// You are muting this account.
        /// </summary>
        /// <value>You are muting this account.</value>

        [DataMember(Name="muting")]
        public bool? Muting { get; set; }

        /// <summary>
        /// You are muting notifications from this account.
        /// </summary>
        /// <value>You are muting notifications from this account.</value>

        [DataMember(Name="muting_notifications")]
        public bool? MutingNotifications { get; set; }

        /// <summary>
        /// Your note on this account.
        /// </summary>
        /// <value>Your note on this account.</value>

        [DataMember(Name="note")]
        public string Note { get; set; }

        /// <summary>
        /// You are seeing notifications when this account posts.
        /// </summary>
        /// <value>You are seeing notifications when this account posts.</value>

        [DataMember(Name="notifying")]
        public bool? Notifying { get; set; }

        /// <summary>
        /// You have requested to follow this account, and the request is pending.
        /// </summary>
        /// <value>You have requested to follow this account, and the request is pending.</value>

        [DataMember(Name="requested")]
        public bool? Requested { get; set; }

        /// <summary>
        /// You are seeing reblogs/boosts from this account in your home timeline.
        /// </summary>
        /// <value>You are seeing reblogs/boosts from this account in your home timeline.</value>

        [DataMember(Name="showing_reblogs")]
        public bool? ShowingReblogs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccountRelationship {\n");
            sb.Append("  BlockedBy: ").Append(BlockedBy).Append("\n");
            sb.Append("  Blocking: ").Append(Blocking).Append("\n");
            sb.Append("  DomainBlocking: ").Append(DomainBlocking).Append("\n");
            sb.Append("  Endorsed: ").Append(Endorsed).Append("\n");
            sb.Append("  FollowedBy: ").Append(FollowedBy).Append("\n");
            sb.Append("  Following: ").Append(Following).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Muting: ").Append(Muting).Append("\n");
            sb.Append("  MutingNotifications: ").Append(MutingNotifications).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Notifying: ").Append(Notifying).Append("\n");
            sb.Append("  Requested: ").Append(Requested).Append("\n");
            sb.Append("  ShowingReblogs: ").Append(ShowingReblogs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this,new JsonSerializerOptions(){WriteIndented = true});
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccountRelationship)obj);
        }

        /// <summary>
        /// Returns true if AccountRelationship instances are equal
        /// </summary>
        /// <param name="other">Instance of AccountRelationship to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccountRelationship other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BlockedBy == other.BlockedBy ||
                    BlockedBy != null &&
                    BlockedBy.Equals(other.BlockedBy)
                ) && 
                (
                    Blocking == other.Blocking ||
                    Blocking != null &&
                    Blocking.Equals(other.Blocking)
                ) && 
                (
                    DomainBlocking == other.DomainBlocking ||
                    DomainBlocking != null &&
                    DomainBlocking.Equals(other.DomainBlocking)
                ) && 
                (
                    Endorsed == other.Endorsed ||
                    Endorsed != null &&
                    Endorsed.Equals(other.Endorsed)
                ) && 
                (
                    FollowedBy == other.FollowedBy ||
                    FollowedBy != null &&
                    FollowedBy.Equals(other.FollowedBy)
                ) && 
                (
                    Following == other.Following ||
                    Following != null &&
                    Following.Equals(other.Following)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Muting == other.Muting ||
                    Muting != null &&
                    Muting.Equals(other.Muting)
                ) && 
                (
                    MutingNotifications == other.MutingNotifications ||
                    MutingNotifications != null &&
                    MutingNotifications.Equals(other.MutingNotifications)
                ) && 
                (
                    Note == other.Note ||
                    Note != null &&
                    Note.Equals(other.Note)
                ) && 
                (
                    Notifying == other.Notifying ||
                    Notifying != null &&
                    Notifying.Equals(other.Notifying)
                ) && 
                (
                    Requested == other.Requested ||
                    Requested != null &&
                    Requested.Equals(other.Requested)
                ) && 
                (
                    ShowingReblogs == other.ShowingReblogs ||
                    ShowingReblogs != null &&
                    ShowingReblogs.Equals(other.ShowingReblogs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BlockedBy != null)
                    hashCode = hashCode * 59 + BlockedBy.GetHashCode();
                    if (Blocking != null)
                    hashCode = hashCode * 59 + Blocking.GetHashCode();
                    if (DomainBlocking != null)
                    hashCode = hashCode * 59 + DomainBlocking.GetHashCode();
                    if (Endorsed != null)
                    hashCode = hashCode * 59 + Endorsed.GetHashCode();
                    if (FollowedBy != null)
                    hashCode = hashCode * 59 + FollowedBy.GetHashCode();
                    if (Following != null)
                    hashCode = hashCode * 59 + Following.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Muting != null)
                    hashCode = hashCode * 59 + Muting.GetHashCode();
                    if (MutingNotifications != null)
                    hashCode = hashCode * 59 + MutingNotifications.GetHashCode();
                    if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                    if (Notifying != null)
                    hashCode = hashCode * 59 + Notifying.GetHashCode();
                    if (Requested != null)
                    hashCode = hashCode * 59 + Requested.GetHashCode();
                    if (ShowingReblogs != null)
                    hashCode = hashCode * 59 + ShowingReblogs.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccountRelationship left, AccountRelationship right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccountRelationship left, AccountRelationship right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
