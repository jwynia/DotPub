/*
 * GoToSocial Swagger documentation.
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: REPLACE_ME
 * Contact: admin@gotosocial.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace DotPub.DataContracts.Models
{
    /// <summary>
    /// Domain represents a remote domain
    /// </summary>
    [DataContract]
    public partial class Domain : IEquatable<Domain>
    {
        /// <summary>
        /// The hostname of the domain.
        /// </summary>
        /// <value>The hostname of the domain.</value>

        [DataMember(Name = "domain")]
        public string _Domain { get; set; }

        /// <summary>
        /// If the domain is blocked, what&#39;s the publicly-stated reason for the block.
        /// </summary>
        /// <value>If the domain is blocked, what&#39;s the publicly-stated reason for the block.</value>

        [DataMember(Name = "public_comment")]
        public string PublicComment { get; set; }

        /// <summary>
        /// Time at which this domain was silenced. Key will not be present on open domains.
        /// </summary>
        /// <value>Time at which this domain was silenced. Key will not be present on open domains.</value>

        [DataMember(Name = "silenced_at")]
        public string SilencedAt { get; set; }

        /// <summary>
        /// Time at which this domain was suspended. Key will not be present on open domains.
        /// </summary>
        /// <value>Time at which this domain was suspended. Key will not be present on open domains.</value>

        [DataMember(Name = "suspended_at")]
        public string SuspendedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Domain {\n");
            sb.Append("  _Domain: ").Append(_Domain).Append("\n");
            sb.Append("  PublicComment: ").Append(PublicComment).Append("\n");
            sb.Append("  SilencedAt: ").Append(SilencedAt).Append("\n");
            sb.Append("  SuspendedAt: ").Append(SuspendedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions() { WriteIndented = true });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Domain)obj);
        }

        /// <summary>
        /// Returns true if Domain instances are equal
        /// </summary>
        /// <param name="other">Instance of Domain to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Domain other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    _Domain == other._Domain ||
                    _Domain != null &&
                    _Domain.Equals(other._Domain)
                ) &&
                (
                    PublicComment == other.PublicComment ||
                    PublicComment != null &&
                    PublicComment.Equals(other.PublicComment)
                ) &&
                (
                    SilencedAt == other.SilencedAt ||
                    SilencedAt != null &&
                    SilencedAt.Equals(other.SilencedAt)
                ) &&
                (
                    SuspendedAt == other.SuspendedAt ||
                    SuspendedAt != null &&
                    SuspendedAt.Equals(other.SuspendedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (_Domain != null)
                    hashCode = hashCode * 59 + _Domain.GetHashCode();
                if (PublicComment != null)
                    hashCode = hashCode * 59 + PublicComment.GetHashCode();
                if (SilencedAt != null)
                    hashCode = hashCode * 59 + SilencedAt.GetHashCode();
                if (SuspendedAt != null)
                    hashCode = hashCode * 59 + SuspendedAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(Domain left, Domain right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Domain left, Domain right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}