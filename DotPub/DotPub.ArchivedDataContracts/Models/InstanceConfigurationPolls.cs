/*
 * GoToSocial Swagger documentation.
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: REPLACE_ME
 * Contact: admin@gotosocial.org
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;

namespace DotPub.DataContracts.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InstanceConfigurationPolls : IEquatable<InstanceConfigurationPolls>
    {
        /// <summary>
        /// Number of characters allowed per option in the poll.
        /// </summary>
        /// <value>Number of characters allowed per option in the poll.</value>

        [DataMember(Name = "max_characters_per_option")]
        public long? MaxCharactersPerOption { get; set; }

        /// <summary>
        /// Maximum expiration time of the poll in seconds.
        /// </summary>
        /// <value>Maximum expiration time of the poll in seconds.</value>

        [DataMember(Name = "max_expiration")]
        public long? MaxExpiration { get; set; }

        /// <summary>
        /// Number of options permitted in a poll on this instance.
        /// </summary>
        /// <value>Number of options permitted in a poll on this instance.</value>

        [DataMember(Name = "max_options")]
        public long? MaxOptions { get; set; }

        /// <summary>
        /// Minimum expiration time of the poll in seconds.
        /// </summary>
        /// <value>Minimum expiration time of the poll in seconds.</value>

        [DataMember(Name = "min_expiration")]
        public long? MinExpiration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstanceConfigurationPolls {\n");
            sb.Append("  MaxCharactersPerOption: ").Append(MaxCharactersPerOption).Append("\n");
            sb.Append("  MaxExpiration: ").Append(MaxExpiration).Append("\n");
            sb.Append("  MaxOptions: ").Append(MaxOptions).Append("\n");
            sb.Append("  MinExpiration: ").Append(MinExpiration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonSerializer.Serialize(this, new JsonSerializerOptions() { WriteIndented = true });
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InstanceConfigurationPolls)obj);
        }

        /// <summary>
        /// Returns true if InstanceConfigurationPolls instances are equal
        /// </summary>
        /// <param name="other">Instance of InstanceConfigurationPolls to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstanceConfigurationPolls other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    MaxCharactersPerOption == other.MaxCharactersPerOption ||
                    MaxCharactersPerOption != null &&
                    MaxCharactersPerOption.Equals(other.MaxCharactersPerOption)
                ) &&
                (
                    MaxExpiration == other.MaxExpiration ||
                    MaxExpiration != null &&
                    MaxExpiration.Equals(other.MaxExpiration)
                ) &&
                (
                    MaxOptions == other.MaxOptions ||
                    MaxOptions != null &&
                    MaxOptions.Equals(other.MaxOptions)
                ) &&
                (
                    MinExpiration == other.MinExpiration ||
                    MinExpiration != null &&
                    MinExpiration.Equals(other.MinExpiration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (MaxCharactersPerOption != null)
                    hashCode = hashCode * 59 + MaxCharactersPerOption.GetHashCode();
                if (MaxExpiration != null)
                    hashCode = hashCode * 59 + MaxExpiration.GetHashCode();
                if (MaxOptions != null)
                    hashCode = hashCode * 59 + MaxOptions.GetHashCode();
                if (MinExpiration != null)
                    hashCode = hashCode * 59 + MinExpiration.GetHashCode();
                return hashCode;
            }
        }

        #region Operators

#pragma warning disable 1591

        public static bool operator ==(InstanceConfigurationPolls left, InstanceConfigurationPolls right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InstanceConfigurationPolls left, InstanceConfigurationPolls right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591

        #endregion Operators
    }
}